---
jupyter: python3
title: "MassSave Exploration"
---

```{python}
import pandas as pd
import numpy as np
import re
import glob
```

```{python}
df = pd.read_excel("/workspaces/hp-adoption/local_data/hvac_2023_retrofit_propane.xlsx")
df.columns = ["municipality","installed_hp_accounts","intalled_hp_locations"]
df = df.set_index("municipality")
print(df)
```

```{python}
def read_and_clean_masssave_data(file_path):
    print(file_path)
    df = pd.read_excel(file_path)
    df.columns = ["municipality","installed_hp_accounts","installed_hp_locations"]
    df = df.set_index("municipality")
    df = df.replace("*",np.nan) # todo, maybe some other sentinal here for "present but below threshold"

    fileyear = re.search(r'\d{4}', file_path).group(0)
    displaced_fuel = re.search(r'propane|electric|gas|oil|nodisplacement', file_path).group(0)
    applied_filters = df.index[-1].lower().replace("no displacement","nodisplacement")

    # assert that filename matches the filters in the file
    assert f"year is {fileyear}" in applied_filters, f"Year {fileyear} does not match the year in the filename"
    assert f"displaced_fuel is {displaced_fuel}" in applied_filters, f"Displaced fuel {displaced_fuel} does not match the displaced fuel in the filename"
    assert np.isnan(df.index[-2]), "2nd to last row should be NaN"

    df["year"] = fileyear
    df["displaced_fuel"] = displaced_fuel

    df = df.reset_index().set_index(["municipality","year","displaced_fuel"])
    df = df.iloc[:-2] # drop the last rows, which are the applied filters and a NaN col

    return df

df = read_and_clean_masssave_data("/workspaces/hp-adoption/local_data/hvac_2022_retrofit_nodisplacement.xlsx")
print(df)
```

```{python}
# read all the xlsx files in local_data folder that start with hvac_ using read_and_clean_masssave_data
# and concatenate them into a single dataframe

# get all the xlsx files in local_data folder that start with hvac_
files = glob.glob("/workspaces/hp-adoption/local_data/hvac_*.xlsx")

# read and clean each file
dfs = [read_and_clean_masssave_data(file) for file in files]

# concatenate the dataframes
df = pd.concat(dfs)

# save the dataframe to a csv file
df.to_csv("/workspaces/hp-adoption/local_data/masssave_hvac_data.csv", index=True)
```

```{python}
df.xs("Total",level="municipality")["installed_hp_locations"].unstack()
```

```{python}
df.query("municipality != 'Total'").groupby(["year","displaced_fuel"]).sum()["installed_hp_locations"].unstack()
```


### Example usage of code to download data from MassSave

```{python}

from masssave_reader import MassSaveFilter, MassSaveQuery

msq = MassSaveQuery(
    filters=[MassSaveFilter(column="Heat_pump", values=["Energy efficiency"], operator="In")]
)

### These expire in O(10s of mins); get fresh one from developer tools tab from a query in
### https://viewer.dnv.com/macustomerprofile/entity/1444/report/2078
token = "H4sIAAAAAAAEAB2Ut66EVgBE_-W1WCInSy5YlgtLzqkDlpxzsPzvfnY_1Zkz8_ePmdzdmHx__vwJ4dfHNJ_F2yt2SWYXnoeWLHr9PCXXaghWj60k2JZsSAKKWFiRG4TWZNkHJNbCJivybWGmXaSWEbIAMwicqZ_Dd-tu3SA8ySc9erDgmSlPsO7Ch-53GJ9LhzJwlJJa12D4CAjT-zCcVqr-0hOkfNPh3GntzuXPM8HagmNVNoy0jbdfesUezF9tR1xrXPKSp-wthBSzMhl02wY--H60sFA9wZGLJMZaHlEHr1K3rQe37TKzPT53U6NwFBnqQHLb21p7rf_o5yVuB4-zu-ybL83t4WUp78FgPIIg6XfyxEbeD7SzBgcrliNbl0wBFJJz0NgKWXlDCPoUVFGNoSjw0DJFIyMr3LIUUzAbeTcYrkX2nbB-mzqdIr0rq5zXvDc4HdmEsRloAm_kNZ5YWcc_vZDYvp74N3urDSMMfuldzV5lqhoe7yKDuSlJFoqupDPfhaORDhyqenzF4vKTiwlx9xvRvGpABYWxBWjTLwlRifO9OvxvvS5XRmZUFAzVoBhrn8i78r4H8eYgBRode_cddXhPG5m95fVLqxfuoHrdJqYfVmqUu1jaBTA4iELIO54qeW11srrwwsl181YaVJyGw_dAZFuCzT0N4nijhpkIVt9y9XjUaZLxMRw6yJa2L3yr7goJWIUDLmStnxVOAD1HFB1j3dxo74oIBBxRmMfhdXBkn-grqXSP1yTL2yU4hfT2Gk1at2TmLz2NJueIVovOoWvFReWSRaYMkGsr0NQ1YMix1s575ewuCcz-FWwPLQh5H_ESmvbHLJ2FL1-Ad9ro1YGSgmQooHaxAcOZQM8qkcWxrh1--Qm8KfZaisiw1uYwUE-69qkaOw-A4Bd0cPr1urI6O8yLwG2jORzXIhTlwUA-Nue7dB8mjDWHFVRKf52pNVYK5__88cMv97SNSn7_zlHAf8l8HDHZv1aPNKOPLogkRO15Q_cR1K9fjz3Z3BYgEaDFjQO34DfGfm0xhyGCmx0Ktl2r83aSREp6MA71EjTD1_XiVdy1-hFgg7tLp_eVgNwXZ3Qik4T5ULB0NxpvwGIMEG530ZIeMsK-jBy4QqtqRuCHVIjHkuqo2lIkvLs40sQNEiPMQVwsEaBn-xRsyfjjI5v8U6rzZtS4XkI4GCbY1LA-bbuXRvAVPqY5FqgZRpaPmqp147vuqduPJIH78zxxY4sKK4o1Nb_WFipHS6pIqfiyrJmM533w3Iq2xic1JHV2L5DBtirOfkyYA54iTETXiHcq3YAWE4ZfjfVtdfbWrb_--g_zPVX58vF_KfvZJLWU2iRLSFMfNqkrp--4_1NOXQ7Jti_5b0yRFfVsZkYCFSPEx65fp-lu3Y0KAVmJbtSYUSuujdTtYXkDx0vfxAtFZ6JDl7PJ-IrK0i9X5h09UZLQ3Z8gDnIOQ2UY-u5omGsf-dfvTTyn3ztTPPZp5FdlhR3Qg2Gulm8-LRMBF34v0JAuKgwZAzrHFUG0pmOFQ7fKAkCyzO1r6IRht7LZXq9A-DwxZCrmw6s6qpbEFgQx1v6LxpevUMQbpjO_ttfEpLStKKPJdY4BNLJTm7QB0P4Kn0JVdl6js7FsLEXUrO-E8LTPPpAoXGCZrt9L0EZP4kAxMYWnAgV2A1kO8tQG47r0c6aiMlNQnj33Odm5vMUKYTq-gkN4oY1o_FfGP_8CJGu98oIGAAA=.eyJjbHVzdGVyVXJsIjoiaHR0cHM6Ly9XQUJJLU5PUlRILUVVUk9QRS1FLVBSSU1BUlktcmVkaXJlY3QuYW5hbHlzaXMud2luZG93cy5uZXQiLCJleHAiOjE3NDk3NjQzNTIsInByaXZhdGVMaW5rc0VuYWJsZWQiOnRydWUsImFsbG93QWNjZXNzT3ZlclB1YmxpY0ludGVybmV0Ijp0cnVlfQ=="

data = msq.run_query(token)

print(data)
```
